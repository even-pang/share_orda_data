/**
 * Class Summary. <br>
 * DB Controller class.
 * @since 1.00
 * @version 1.00 - 2019. 09. 26
 * @author 이현도
 * @see
 */
package charm.db;
 
import java.util.List;
import java.util.Map;

import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.ApplicationContext;

import charm.util.CommDef;
import charm.util.CommonUtil;
 
 
public class DbController 
{
	public static ApplicationContext m_appCtx = null;
	public  DbDao m_dao =null;
	public int  PAGE_ROWCOUNT = CommDef.PAGE_ROWCOUNT;
	
	/**
	 * 생성자
	 * @param none
	 * @return none
	 * @exception Exception
	*/	
	public DbController( )
	{
		//System.out.println( " ==================== charm.db Create " + this );
		
		if ( m_appCtx == null) {
		    m_appCtx = new ClassPathXmlApplicationContext( "org/mybatis/mybatisContext.xml" );
		    System.out.println( " m_appCtx ==================== charm.db Create " + this );
		}
		
		//if ( m_dao == null ) {
		    m_dao    = m_appCtx.getBean("dbDao", DbDao.class) ;
		   // System.out.println( " m_dao ==================== charm.db Create " + this );
		//}
	}
	
	public DbDao getDao(){
		return m_dao;
	}
    
	public int dbInsert( Map reqMap, String strXPath )
	{ 
		return m_dao.insert( reqMap, strXPath );
	}	
	
	public int dbInsert( List lst, String strXPath )	
	{ 
		return m_dao.insert( lst, strXPath );
	}	
	 
	
	public int dbUpdate( Map reqMap, String strXPath )
	{ 
		return m_dao.update( reqMap, strXPath );
	}		
	
	public int dbDelete( Map reqMap, String strXPath )
	{ 
		return m_dao.delete( reqMap, strXPath );
	}

	public int dbDelete(String strXPath )
	{ 
		return m_dao.delete(strXPath );
	}	
	
	public List dbList(String strXPath )
	{ 
		return m_dao.list(strXPath);
	}		
	
	public List dbList( Map reqMap, String strXPath )
	{ 
		return m_dao.list(reqMap, strXPath);
	}		
		
	public List dbList( Map reqMap, String strXPath,   int iRowStartPos, int iCount)
	{ 
		return m_dao.list(reqMap, strXPath, iRowStartPos, iCount);
	}		
	
	public List dbPagingList( Map reqMap, String strXPath,   int iRowStartPos, int iCount)
	{ 
		return m_dao.dbPagingList(reqMap, strXPath, iRowStartPos, iCount);
	}		
	
	
	public Map dbDetail(String strXPath )
	{ 
		return m_dao.detail(strXPath);
	}		
	
	public Map dbDetail( Map reqMap, String strXPath )
	{ 
		return m_dao.detail(reqMap, strXPath);
	}		
	
	public int dbInt( Map reqMap, String strXPath)
	{ 
		return m_dao.getInt(reqMap, strXPath);
	}		
	
	public int dbInt( String strXPath)
	{ 
		return m_dao.getInt(strXPath);
	}	
	
	
	public long dbLong( String strXPath)
	{ 
		return m_dao.getLong(strXPath);
	}		
	
	public int dbCount( String strXPath)
	{ 
		return m_dao.getCount(strXPath);
	}	
	
	public int dbCount( Map reqMap, String strXPath)
	{ 
		return m_dao.getCount(reqMap, strXPath);
	}		
	
    /**
     * Method Summary. <br>
     * 한 페이지당 표시할 건수 값을 조회한다. method.
     * @param HashMap reqMap 파라미터 객체
     * @param String strMapKey HashMap의 키
     * @return int 한 페이지당 표시할 건수
     * @throws 
     * @since 1.00
     * @see
     */
	public int getPageRowCount(Map reqMap, String strMapKey)
	{
		return getPageRowCount(reqMap, strMapKey, PAGE_ROWCOUNT);
	}
	
    /**
     * Method Summary. <br>
     * 한 페이지당 표시할 건수 값을 조회한다. method.
     * @param HashMap reqMap 파라미터 객체
     * @param String strMapKey HashMap의 키
     * @return int 한 페이지당 표시할 건수
     * @throws 
     * @since 1.00
     * @see
     */
	public int getPageRowCount(Map reqMap, String strMapKey, int nRowCount)
	{
		
		if (reqMap == null || reqMap.isEmpty())
			return nRowCount;
		
		try
		{
			nRowCount = Integer.parseInt( CommonUtil.getNullTrans(reqMap.get( strMapKey), nRowCount));
		} catch (Exception e) {
			nRowCount = PAGE_ROWCOUNT;
		}
		
		return nRowCount;
	}
	
   
    /**
     * Method Summary. <br>
     * 현재 페이지 값을 조회한다. method.
     * @param HashMap reqMap 파라미터 객체
     * @param String strMapKey HashMap의 키
     * @return int 현재 페이지 값
     * @throws 
     * @since 1.00
     * @see
     */
	public int getPageNow(Map reqMap, String strMapKey)
	{
		int nPage = 1;
		
		if (reqMap == null || reqMap.isEmpty())
			return nPage;
		
		try
		{
			nPage = Integer.parseInt( CommonUtil.getNullTrans(reqMap.get( strMapKey), 1));
		} catch (Exception e) {
			nPage = 1;
		}
		
		return nPage;
	}		
	
}